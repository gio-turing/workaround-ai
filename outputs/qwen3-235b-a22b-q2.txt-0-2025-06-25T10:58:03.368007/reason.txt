Okay, I need to write a Python function called get_time that takes a server_uri and returns the current time from an NTP server as an ISO datetime string. No authentication is needed. Hmm, how to approach this.

First, I remember that NTP is the Network Time Protocol. To get the time from an NTP server, I need to send a request to it. Python has some libraries that can handle NTP. Maybe the ntplib library? Or maybe using sockets directly?

Wait, ntplib is a third-party library. If I can use that, it would simplify things. But if the user expects a solution that doesn't rely on external libraries, then I need to use the standard library. Let's check the problem statement again. The user didn't specify whether external libraries are allowed. Hmm. But the example response might indicate that they want a solution using standard libraries, but I'm not sure.

Alternatively, maybe using the socket module to send an NTP request manually. That's more involved but would work without extra dependencies.

Let me think. The NTP protocol works over UDP. The client sends a request packet to the server's port 123, then the server responds. The client needs to parse the response to get the time.

The structure of the NTP packet: the first byte is the LI, VN, and Mode. For a client request, the mode should be 3 (client). The version number is usually 3 or 4. Let's set the first byte to 0x1B (which is 27 in decimal, corresponding to NTP version 4, mode 3). Then the rest of the packet can be zeroed out.

So steps:

1. Create a UDP socket.
2. Send a packet with the first byte 0x1B to the server_uri's port 123.
3. Receive the response.
4. Parse the response's transmit timestamp to get the time.
5. Convert that timestamp to a datetime object and format it as ISO string.

Wait, the server_uri could be a hostname or IP address. So in the code, we need to resolve it to an IP address.

But how to parse the NTP response packet. The transmit timestamp is a 64-bit value (32 bits for seconds, 32 bits for microseconds), starting at offset 40 in the packet.

The NTP epoch starts in 1900, so the seconds need to be converted to Unix epoch (1970) by subtracting 2208988800 seconds (which is 70 years in seconds, considering leap years).

So here's the plan:

- Use socket to send the request.
- Receive the response.
- Unpack the 64-bit timestamp.
- Convert to a datetime object.
- Return the ISO format string.

Let me outline the code.

First, import socket, struct, datetime.

def get_time(server_uri):
    # create a UDP socket
    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    # send the packet with 0x1B as first byte, rest zeros
    client.sendto(b'\x1b' + 47 * b'\0', (server_uri, 123))
    # receive data
    data, _ = client.recvfrom(1024)
    # extract the transmit timestamp at offset 40
    # the data is 48 bytes long usually
    # the timestamp is a 64-bit unsigned fixed-point number
    # first 32 bits are seconds, next 32 bits are fractions of a second
    # using struct.unpack to get the seconds part
    timestamp = struct.unpack('!I', data[40:44])[0]
    # convert to Unix epoch
    unix_time = timestamp - 2208988800
    # create datetime object
    dt = datetime.datetime.utcfromtimestamp(unix_time)
    # return ISO string
    return dt.isoformat()

Wait, but wait, what about the fractions of a second? The microseconds part. So the 32 bits after the seconds. So to get more precise time, we can take that into account.

So:

seconds, fractions = struct.unpack('!II', data[40:48])
unix_time = (seconds - 2208988800) + (fractions / 2**32)

But then, using utcfromtimestamp, which takes a float. So including the fractional part would give a more precise timestamp. However, in some cases, the fractions could be zero, so using only seconds may be sufficient but less precise.

Including both seconds and fractions would be better.

Let me adjust that.

So code steps:

import socket
import struct
import datetime

def get_time(server_uri):
    # Create a UDP socket
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
        # Set a timeout (maybe 5 seconds, in case server doesn't respond)
        sock.settimeout(5)
        # Send the NTP request packet
        sock.sendto(b'\x1b' + b'\x00' * 47, (server_uri, 123))
        # Receive the response
        data, _ = sock.recvfrom(1024)
    # Parse the response
    # Get seconds and fractions
    seconds, fractions = struct.unpack_from('!II', data, offset=40)
    # Convert to Unix timestamp
    unix_time = (seconds - 2208988800) + (fractions / 2**32)
    # Convert to UTC datetime
    dt = datetime.datetime.utcfromtimestamp(unix_time)
    # Return ISO format string
    return dt.isoformat()

Wait, but struct.unpack_from is in struct module. Or wait, in Python's struct.unpack, you can slice the data. So data[40:48] is 8 bytes. So:

seconds, fractions = struct.unpack('!II', data[40:48])

That's correct.

Wait, data[40:48] starts at index 40, includes bytes 40,41,42,43,44,45,46,47. 8 bytes total. So yes, 4 bytes for each unsigned int.

But wait, the 40th byte is the first byte of the transmit timestamp. The transmit timestamp is 64 bits, so 8 bytes. So offset 40 in the packet.

So that's right.

Testing this code might be needed, but according to standard NTP packet structure, that's correct.

What about error handling? Like if the socket can't connect, or server not responding. But the problem says to return a function, so errors would raise exceptions, which is okay.

But the problem says "without authentication". So this code doesn't handle that, which is correct.

So the code should be okay.

Wait, but the server_uri might include a port, but the function uses port 123. So if server_uri is a hostname, it's okay. If it's a URI with port, then the (server_uri, 123) would ignore the port. Wait, no. Wait, the server_uri here is passed as a string to the function. The function uses (server_uri, 123) as the address. So if server_uri is a hostname or IP address. If the server_uri includes a port (like 'example.com:1234'), then the split would not happen. But according to the problem statement, server_uri is the NTP server's URI, which typically uses port 123. So the function assumes that server_uri is a hostname or IP address, and uses port 123. So the code is correct.

Now, for the ISO datetime: the datetime object created with utcfromtimestamp is in UTC. So the isoformat string will have a 'Z' suffix.

Testing this code would be good, but assuming that the code works.

So the final code would be:

import socket
import struct
import datetime

def get_time(server_uri):
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:
        sock.settimeout(5)
        sock.sendto(b'\x1b' + b'\x00'*47, (server_uri, 123))
        data, _ = sock.recvfrom(1024)
    seconds, fractions = struct.unpack('!II', data[40:48])
    unix_time = (seconds - 2208988800) + (fractions / (2**32))
    dt = datetime.datetime.utcfromtimestamp(unix_time)
    return dt.isoformat()

Wait, but in Python, utcfromtimestamp takes a float, which is okay. But fractions / (2**32) would give a float.

But perhaps using datetime.datetime.utcfromtimestamp(unix_time) is correct.

I think that's correct.

Potential issues:

- The server_uri must be a hostname or IP address. The function relies on socket.getaddrinfo to resolve it. Which it should.

- The timeout is set to 5 seconds, which is reasonable. If the server doesn't respond, the function will raise socket.timeout, which is okay.

- The 'with' statement handles the socket cleanup.

Yes, this should work.

I think that's the code.